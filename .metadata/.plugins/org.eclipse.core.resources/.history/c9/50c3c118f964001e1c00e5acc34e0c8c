package k21;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

public class DepthFirstSearchAlgo implements ISearchAlgo{

	@Override
	public Node execute(Node root, String goal) {
		// TODO Auto-generated method stub
	
		Stack<Node> fontier = new Stack<>();
		Collections.sort(fontier, new Comparator<Node>() {

			@Override
			public int compare(Node o1, Node o2) {
				// TODO Auto-generated method stub
				return o1.getLabel().compareTo(o2.getLabel());
			}
		});
		fontier.add(root);
		//
		List<Node> explored = new ArrayList<>();
		while (!fontier.isEmpty()) {
		Node current = fontier.pop();
		if(current.getLabel().equals(goal)) return current;
		//
		explored.add(current);
		List<Node> children = current.getChildrenNodes();
		for (Node child : children) {
			//
			if(!fontier.contains(child)&&!explored.contains(child)) {
				fontier.add(child);
				child.setParent(current);
				}
			
		}
			
		}
		return null;
	}

	@Override
	public Node execute(Node root, String start, String goal) {
		// TODO Auto-generated method stub
		return null;
	}

	
}
